version: 2.1

orbs: 
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
jobs:
  build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  build-image:
    docker:
      - image: irisstream/capstone-image
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: build docker image
          command: |
            docker build -t ${docker_image}:${CIRCLE_WORKFLOW_ID:0:7} --build-arg version=${CIRCLE_WORKFLOW_ID:0:7} .
      - run:
          name: build & upload docker image
          command: |
            docker images
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $docker_repo
            docker tag $docker_image:${CIRCLE_WORKFLOW_ID:0:7} $docker_repo/$docker_image:${CIRCLE_WORKFLOW_ID:0:7}
            docker push $docker_repo/$docker_image:${CIRCLE_WORKFLOW_ID:0:7}
            docker logout
  deploy:
    docker:
      - image: irisstream/capstone-image
    steps:
      - checkout
      - kubernetes/install:
          kubectl-version: v1.23.6
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: deploy to aws
          command: |
            aws eks --region us-east-1 update-kubeconfig --name my-cluster
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${docker_repo}
            kubectl set image deployment/capstone capstone=${docker_repo}/${docker_image}:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: health check
          command: |
            URL=http://$(kubectl get svc/capstone-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo 'URL=$URL'
            STATUS=0
            ATTEMPTS=0
            VERSION=whateveryouwant
            while true; do
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Attempts ${ATTEMPTS}: checking ..."
              echo "Status: $STATUS"
              echo "Version: $VERSION"
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL)
              VERSION=$(curl -s $URL | grep 'Version' | sed 's/ Version: //')
              ([ $ATTEMPTS -eq 60 ] || [ $STATUS -ne 200 ] || [ "$VERSION" = "$CIRCLE_WORKFLOW_ID:0:7" ]) && break
              sleep 1
            done
            if [ $STATUS -ne 200 ] || [ "$VERSION" != "$CIRCLE_WORKFLOW_ID:0:7" ]; then
              echo "Service is not healthy"
              exit 1
            fi
      - run:
          name: roolback
          when: on_fail
          command: |
            kubectl rollout undo deployment/capstone
workflows:
  build:
    jobs:
      - build
      - build-image:
          requires:
            - build
          filters:
            branches:
              only: [main]
      - deploy: 
          requires:
            - build-image